{
  "version": 3,
  "sources": ["node_modules/.pnpm/spotify-web-api-js@1.5.2/node_modules/spotify-web-api-js/src/spotify-web-api.js", "src/main.ts", "src/PlayerPluginSettingTab.ts", "src/types.ts", "src/SpotifyAuthorizer.ts", "src/PlayButton.ts", "src/Logger.ts"],
  "sourcesContent": ["/* global module */\n'use strict';\n\n/**\n * Class representing the API\n */\nvar SpotifyWebApi = (function () {\n  var _baseUri = 'https://api.spotify.com/v1';\n  var _accessToken = null;\n  var _promiseImplementation = null;\n\n  var WrapPromiseWithAbort = function (promise, onAbort) {\n    promise.abort = onAbort;\n    return promise;\n  };\n\n  var _promiseProvider = function (promiseFunction, onAbort) {\n    var returnedPromise;\n    if (_promiseImplementation !== null) {\n      var deferred = _promiseImplementation.defer();\n      promiseFunction(\n        function (resolvedResult) {\n          deferred.resolve(resolvedResult);\n        },\n        function (rejectedResult) {\n          deferred.reject(rejectedResult);\n        }\n      );\n      returnedPromise = deferred.promise;\n    } else {\n      if (window.Promise) {\n        returnedPromise = new window.Promise(promiseFunction);\n      }\n    }\n\n    if (returnedPromise) {\n      return new WrapPromiseWithAbort(returnedPromise, onAbort);\n    } else {\n      return null;\n    }\n  };\n\n  var _extend = function () {\n    var args = Array.prototype.slice.call(arguments);\n    var target = args[0];\n    var objects = args.slice(1);\n    target = target || {};\n    objects.forEach(function (object) {\n      for (var j in object) {\n        if (object.hasOwnProperty(j)) {\n          target[j] = object[j];\n        }\n      }\n    });\n    return target;\n  };\n\n  var _buildUrl = function (url, parameters) {\n    var qs = '';\n    for (var key in parameters) {\n      if (parameters.hasOwnProperty(key)) {\n        var value = parameters[key];\n        qs += encodeURIComponent(key) + '=' + encodeURIComponent(value) + '&';\n      }\n    }\n    if (qs.length > 0) {\n      // chop off last '&'\n      qs = qs.substring(0, qs.length - 1);\n      url = url + '?' + qs;\n    }\n    return url;\n  };\n\n  var _performRequest = function (requestData, callback) {\n    var req = new XMLHttpRequest();\n\n    var promiseFunction = function (resolve, reject) {\n      function success(data) {\n        if (resolve) {\n          resolve(data);\n        }\n        if (callback) {\n          callback(null, data);\n        }\n      }\n\n      function failure() {\n        if (reject) {\n          reject(req);\n        }\n        if (callback) {\n          callback(req, null);\n        }\n      }\n\n      var type = requestData.type || 'GET';\n      req.open(type, _buildUrl(requestData.url, requestData.params));\n      if (_accessToken) {\n        req.setRequestHeader('Authorization', 'Bearer ' + _accessToken);\n      }\n\n      req.onreadystatechange = function () {\n        if (req.readyState === 4) {\n          var data = null;\n          try {\n            data = req.responseText ? JSON.parse(req.responseText) : '';\n          } catch (e) {\n            console.error(e);\n          }\n\n          if (req.status >= 200 && req.status < 300) {\n            success(data);\n          } else {\n            failure();\n          }\n        }\n      };\n\n      if (type === 'GET') {\n        req.send(null);\n      } else {\n        var postData = null;\n        if (requestData.postData) {\n          if (requestData.contentType === 'image/jpeg') {\n            postData = requestData.postData;\n            req.setRequestHeader('Content-Type', requestData.contentType);\n          } else {\n            postData = JSON.stringify(requestData.postData);\n            req.setRequestHeader('Content-Type', 'application/json');\n          }\n        }\n        req.send(postData);\n      }\n    };\n\n    if (callback) {\n      promiseFunction();\n      return null;\n    } else {\n      return _promiseProvider(promiseFunction, function () {\n        req.abort();\n      });\n    }\n  };\n\n  var _checkParamsAndPerformRequest = function (\n    requestData,\n    options,\n    callback,\n    optionsAlwaysExtendParams\n  ) {\n    var opt = {};\n    var cb = null;\n\n    if (typeof options === 'object') {\n      opt = options;\n      cb = callback;\n    } else if (typeof options === 'function') {\n      cb = options;\n    }\n\n    // options extend postData, if any. Otherwise they extend parameters sent in the url\n    var type = requestData.type || 'GET';\n    if (type !== 'GET' && requestData.postData && !optionsAlwaysExtendParams) {\n      requestData.postData = _extend(requestData.postData, opt);\n    } else {\n      requestData.params = _extend(requestData.params, opt);\n    }\n    return _performRequest(requestData, cb);\n  };\n\n  /**\n   * Creates an instance of the wrapper\n   * @constructor\n   */\n  var Constr = function () {};\n\n  Constr.prototype = {\n    constructor: SpotifyWebApi\n  };\n\n  /**\n   * Fetches a resource through a generic GET request.\n   *\n   * @param {string} url The URL to be fetched\n   * @param {function(Object,Object)} callback An optional callback\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getGeneric = function (url, callback) {\n    var requestData = {\n      url: url\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Fetches information about the current user.\n   * See [Get Current User's Profile](https://developer.spotify.com/web-api/get-current-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMe = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches current user's saved tracks.\n   * See [Get Current User's Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedTracks = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds a list of tracks to the current user's saved tracks.\n   * See [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedTracks = function (trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'PUT',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove a list of tracks from the current user's saved tracks.\n   * See [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedTracks = function (\n    trackIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'DELETE',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Checks if the current user's saved tracks contains a certain list of tracks.\n   * See [Check Current User's Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedTracks = function (\n    trackIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/me/tracks/contains',\n      params: { ids: trackIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of the albums saved in the current Spotify user's \"Your Music\" library.\n   * See [Get Current User's Saved Albums](https://developer.spotify.com/web-api/get-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedAlbums = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Save one or more albums to the current user's \"Your Music\" library.\n   * See [Save Albums for Current User](https://developer.spotify.com/web-api/save-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedAlbums = function (albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'PUT',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove one or more albums from the current user's \"Your Music\" library.\n   * See [Remove Albums for Current User](https://developer.spotify.com/web-api/remove-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedAlbums = function (\n    albumIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'DELETE',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Check if one or more albums is already saved in the current Spotify user's \"Your Music\" library.\n   * See [Check User's Saved Albums](https://developer.spotify.com/web-api/check-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedAlbums = function (\n    albumIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/me/albums/contains',\n      params: { ids: albumIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the current user\u2019s top artists based on calculated affinity.\n   * See [Get a User\u2019s Top Artists](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyTopArtists = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the current user\u2019s top tracks based on calculated affinity.\n   * See [Get a User\u2019s Top Tracks](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyTopTracks = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get tracks from the current user\u2019s recently played tracks.\n   * See [Get Current User\u2019s Recently Played Tracks](https://developer.spotify.com/web-api/web-api-personalization-endpoints/get-recently-played/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyRecentlyPlayedTracks = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/recently-played'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds the current user as a follower of one or more other Spotify users.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followUsers = function (userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Adds the current user as a follower of one or more artists.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followArtists = function (artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Add the current user as a follower of one playlist.\n   * See [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed. For instance,\n   * whether you want the playlist to be followed privately ({public: false})\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followPlaylist = function (playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers',\n      type: 'PUT',\n      postData: {}\n    };\n\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Removes the current user as a follower of one or more other Spotify users.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowUsers = function (userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Removes the current user as a follower of one or more artists.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowArtists = function (artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Remove the current user as a follower of one playlist.\n   * See [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowPlaylist = function (playlistId, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers',\n      type: 'DELETE'\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Checks to see if the current user is following one or more other Spotify users.\n   * See [Check if Current User Follows Users or Artists](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the users sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.isFollowingUsers = function (userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Checks to see if the current user is following one or more artists.\n   * See [Check if Current User Follows](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the artists sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.isFollowingArtists = function (artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Check to see if one or more Spotify users are following a specified playlist.\n   * See [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the users are following the playlist sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.areFollowingPlaylist = function (\n    playlistId,\n    userIds,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Get the current user's followed artists.\n   * See [Get User's Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} [options] Options, being after and limit.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an object with a paged object containing\n   * artists.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * artists objects. Not returned if a callback is given.\n   */\n  Constr.prototype.getFollowedArtists = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following',\n      type: 'GET',\n      params: {\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches information about a specific user.\n   * See [Get a User's Profile](https://developer.spotify.com/web-api/get-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getUser = function (userId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId)\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of the current user's playlists.\n   * See [Get a List of a User's Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId An optional id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>). If not provided, the id of the user that granted\n   * the permissions will be used.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getUserPlaylists = function (userId, options, callback) {\n    var requestData;\n    if (typeof userId === 'string') {\n      requestData = {\n        url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists'\n      };\n    } else {\n      requestData = {\n        url: _baseUri + '/me/playlists'\n      };\n      callback = options;\n      options = userId;\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a specific playlist.\n   * See [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylist = function (playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the tracks from a specific playlist.\n   * See [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylistTracks = function (\n    playlistId,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Gets the current image associated with a specific playlist.\n   * See [Get a Playlist Cover Image](https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist-cover/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:playlist:<here_is_the_playlist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylistCoverImage = function (playlistId, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/images'\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Creates a playlist and stores it in the current user's library.\n   * See [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.createPlaylist = function (userId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists',\n      type: 'POST',\n      postData: options\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Change a playlist's name and public/private state\n   * See [Change a Playlist's Details](https://developer.spotify.com/web-api/change-playlist-details/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} data A JSON object with the data to update. E.g. {name: 'A new name', public: true}\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.changePlaylistDetails = function (\n    playlistId,\n    data,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId,\n      type: 'PUT',\n      postData: data\n    };\n    return _checkParamsAndPerformRequest(requestData, data, callback);\n  };\n\n  /**\n   * Add tracks to a playlist.\n   * See [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addTracksToPlaylist = function (\n    playlistId,\n    uris,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'POST',\n      postData: {\n        uris: uris\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback, true);\n  };\n\n  /**\n   * Replace the tracks of a playlist\n   * See [Replace a Playlist's Tracks](https://developer.spotify.com/web-api/replace-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.replaceTracksInPlaylist = function (\n    playlistId,\n    uris,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: { uris: uris }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Reorder tracks in a playlist\n   * See [Reorder a Playlist\u2019s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {number} rangeStart The position of the first track to be reordered.\n   * @param {number} insertBefore The position where the tracks should be inserted. To reorder the tracks to\n   * the end of the playlist, simply set insert_before to the position after the last track.\n   * @param {Object} options An object with optional parameters (range_length, snapshot_id)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.reorderTracksInPlaylist = function (\n    playlistId,\n    rangeStart,\n    insertBefore,\n    options,\n    callback\n  ) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: {\n        range_start: rangeStart,\n        insert_before: insertBefore\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylist = function (\n    playlistId,\n    uris,\n    callback\n  ) {\n    var dataToBeSent = uris.map(function (uri) {\n      if (typeof uri === 'string') {\n        return { uri: uri };\n      } else {\n        return uri;\n      }\n    });\n\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: { tracks: dataToBeSent }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist, specifying a snapshot id.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylistWithSnapshotId = function (\n    playlistId,\n    uris,\n    snapshotId,\n    callback\n  ) {\n    var dataToBeSent = uris.map(function (uri) {\n      if (typeof uri === 'string') {\n        return { uri: uri };\n      } else {\n        return uri;\n      }\n    });\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        tracks: dataToBeSent,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist, specifying the positions of the tracks to be removed.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<number>} positions array of integers containing the positions of the tracks to remove\n   * from the playlist.\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylistInPositions = function (\n    playlistId,\n    positions,\n    snapshotId,\n    callback\n  ) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        positions: positions,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Upload a custom playlist cover image.\n   * See [Upload A Custom Playlist Cover Image](https://developer.spotify.com/web-api/upload-a-custom-playlist-cover-image/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {string} imageData Base64 encoded JPEG image data, maximum payload size is 256 KB.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.uploadCustomPlaylistCoverImage = function (\n    playlistId,\n    imageData,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/images',\n      type: 'PUT',\n      postData: imageData.replace(/^data:image\\/jpeg;base64,/, ''),\n      contentType: 'image/jpeg'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Fetches an album from the Spotify catalog.\n   * See [Get an Album](https://developer.spotify.com/web-api/get-album/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbum = function (albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the tracks of an album from the Spotify catalog.\n   * See [Get an Album's Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbumTracks = function (albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple albums from the Spotify catalog.\n   * See [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbums = function (albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/',\n      params: { ids: albumIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a track from the Spotify catalog.\n   * See [Get a Track](https://developer.spotify.com/web-api/get-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getTrack = function (trackId, options, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/tracks/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple tracks from the Spotify catalog.\n   * See [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getTracks = function (trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/tracks/',\n      params: { ids: trackIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches an artist from the Spotify catalog.\n   * See [Get an Artist](https://developer.spotify.com/web-api/get-artist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtist = function (artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple artists from the Spotify catalog.\n   * See [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtists = function (artistIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/',\n      params: { ids: artistIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the albums of an artist from the Spotify catalog.\n   * See [Get an Artist's Albums](https://developer.spotify.com/web-api/get-artists-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistAlbums = function (artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of top tracks of an artist from the Spotify catalog, for a specific country.\n   * See [Get an Artist's Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {string} countryId The id of the country (e.g. ES for Spain or US for United States)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistTopTracks = function (\n    artistId,\n    countryId,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/top-tracks',\n      params: { country: countryId }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of artists related with a given one from the Spotify catalog.\n   * See [Get an Artist's Related Artists](https://developer.spotify.com/web-api/get-related-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistRelatedArtists = function (\n    artistId,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/related-artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of Spotify featured playlists (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getFeaturedPlaylists = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/featured-playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of new album releases featured in Spotify (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getNewReleases = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/new-releases'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a List of Categories](https://developer.spotify.com/web-api/get-list-categories/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategories = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a single category used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a Category](https://developer.spotify.com/web-api/get-category/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategory = function (categoryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of Spotify playlists tagged with a particular category.\n   * See [Get a Category's Playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategoryPlaylists = function (\n    categoryId,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId + '/playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get Spotify catalog information about artists, albums, tracks or playlists that match a keyword string.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Array<string>} types An array of item types to search across.\n   * Valid types are: 'album', 'artist', 'playlist', and 'track'.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.search = function (query, types, options, callback) {\n    var requestData = {\n      url: _baseUri + '/search/',\n      params: {\n        q: query,\n        type: types.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches albums from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchAlbums = function (query, options, callback) {\n    return this.search(query, ['album'], options, callback);\n  };\n\n  /**\n   * Fetches artists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchArtists = function (query, options, callback) {\n    return this.search(query, ['artist'], options, callback);\n  };\n\n  /**\n   * Fetches tracks from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchTracks = function (query, options, callback) {\n    return this.search(query, ['track'], options, callback);\n  };\n\n  /**\n   * Fetches playlists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchPlaylists = function (query, options, callback) {\n    return this.search(query, ['playlist'], options, callback);\n  };\n\n  /**\n   * Fetches shows from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchShows = function (query, options, callback) {\n    return this.search(query, ['show'], options, callback);\n  };\n\n  /**\n   * Fetches episodes from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchEpisodes = function (query, options, callback) {\n    return this.search(query, ['episode'], options, callback);\n  };\n\n  /**\n   * Get audio features for a single track identified by its unique Spotify ID.\n   * See [Get Audio Features for a Track](https://developer.spotify.com/web-api/get-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioFeaturesForTrack = function (trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-features/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get audio features for multiple tracks based on their Spotify IDs.\n   * See [Get Audio Features for Several Tracks](https://developer.spotify.com/web-api/get-several-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioFeaturesForTracks = function (trackIds, callback) {\n    var requestData = {\n      url: _baseUri + '/audio-features',\n      params: { ids: trackIds }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get audio analysis for a single track identified by its unique Spotify ID.\n   * See [Get Audio Analysis for a Track](https://developer.spotify.com/web-api/get-audio-analysis/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioAnalysisForTrack = function (trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-analysis/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Create a playlist-style listening experience based on seed artists, tracks and genres.\n   * See [Get Recommendations Based on Seeds](https://developer.spotify.com/web-api/get-recommendations/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getRecommendations = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Retrieve a list of available genres seed parameter values for recommendations.\n   * See [Available Genre Seeds](https://developer.spotify.com/web-api/get-recommendations/#available-genre-seeds) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAvailableGenreSeeds = function (callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations/available-genre-seeds'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get information about a user\u2019s available devices.\n   * See [Get a User\u2019s Available Devices](https://developer.spotify.com/web-api/get-a-users-available-devices/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyDevices = function (callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/devices'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get information about the user\u2019s current playback state, including track, track progress, and active device.\n   * See [Get Information About The User\u2019s Current Playback](https://developer.spotify.com/web-api/get-information-about-the-users-current-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyCurrentPlaybackState = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the object currently being played on the user\u2019s Spotify account.\n   * See [Get the User\u2019s Currently Playing Track](https://developer.spotify.com/web-api/get-the-users-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyCurrentPlayingTrack = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/currently-playing'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Transfer playback to a new device and determine if it should start playing.\n   * See [Transfer a User\u2019s Playback](https://developer.spotify.com/web-api/transfer-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} deviceIds A JSON array containing the ID of the device on which playback should be started/transferred.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.transferMyPlayback = function (\n    deviceIds,\n    options,\n    callback\n  ) {\n    var postData = options || {};\n    postData.device_ids = deviceIds;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player',\n      postData: postData\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Play a track on the user's active device\n   * See [Start/Resume a User's Playback](https://developer.spotify.com/documentation/web-api/reference/player/start-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.play = function (options, callback) {\n    options = options || {};\n    var params =\n      'device_id' in options ? { device_id: options.device_id } : null;\n    var postData = {};\n    ['context_uri', 'uris', 'offset', 'position_ms'].forEach(function (field) {\n      if (field in options) {\n        postData[field] = options[field];\n      }\n    });\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/play',\n      params: params,\n      postData: postData\n    };\n\n    // need to clear options so it doesn't add all of them to the query params\n    var newOptions = typeof options === 'function' ? options : {};\n    return _checkParamsAndPerformRequest(requestData, newOptions, callback);\n  };\n\n  /**\n   * Add an item to the end of the user\u2019s current playback queue.\n   * See [Add an Item to the User's Playback Queue](https://developer.spotify.com/documentation/web-api/reference/player/add-to-queue/) on\n   * the Spotify Developer site for more information about the endpoint.\n   * @param {string} uri The uri of the item to add to the queue. Must be a track or an episode uri.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.queue = function (uri, options, callback) {\n    options = options || {};\n    var params =\n      'device_id' in options\n        ? { uri: uri, device_id: options.device_id }\n        : { uri: uri };\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/queue',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Pause playback on the user\u2019s account.\n   * See [Pause a User\u2019s Playback](https://developer.spotify.com/web-api/pause-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.pause = function (options, callback) {\n    options = options || {};\n    var params =\n      'device_id' in options ? { device_id: options.device_id } : null;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/pause',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Skips to next track in the user\u2019s queue.\n   * See [Skip User\u2019s Playback To Next Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.skipToNext = function (options, callback) {\n    options = options || {};\n    var params =\n      'device_id' in options ? { device_id: options.device_id } : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/next',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Skips to previous track in the user\u2019s queue.\n   * Note that this will ALWAYS skip to the previous track, regardless of the current track\u2019s progress.\n   * Returning to the start of the current track should be performed using `.seek()`\n   * See [Skip User\u2019s Playback To Previous Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.skipToPrevious = function (options, callback) {\n    options = options || {};\n    var params =\n      'device_id' in options ? { device_id: options.device_id } : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/previous',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Seeks to the given position in the user\u2019s currently playing track.\n   * See [Seek To Position In Currently Playing Track](https://developer.spotify.com/web-api/seek-to-position-in-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} position_ms The position in milliseconds to seek to. Must be a positive number.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.seek = function (position_ms, options, callback) {\n    options = options || {};\n    var params = {\n      position_ms: position_ms\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/seek',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Set the repeat mode for the user\u2019s playback. Options are repeat-track, repeat-context, and off.\n   * See [Set Repeat Mode On User\u2019s Playback](https://developer.spotify.com/web-api/set-repeat-mode-on-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {String} state A string set to 'track', 'context' or 'off'.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setRepeat = function (state, options, callback) {\n    options = options || {};\n    var params = {\n      state: state\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/repeat',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Set the volume for the user\u2019s current playback device.\n   * See [Set Volume For User\u2019s Playback](https://developer.spotify.com/web-api/set-volume-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} volume_percent The volume to set. Must be a value from 0 to 100 inclusive.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setVolume = function (volume_percent, options, callback) {\n    options = options || {};\n    var params = {\n      volume_percent: volume_percent\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/volume',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Toggle shuffle on or off for user\u2019s playback.\n   * See [Toggle Shuffle For User\u2019s Playback](https://developer.spotify.com/web-api/toggle-shuffle-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {bool} state Whether or not to shuffle user's playback.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setShuffle = function (state, options, callback) {\n    options = options || {};\n    var params = {\n      state: state\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/shuffle',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a show from the Spotify catalog.\n   * See [Get a Show](https://developer.spotify.com/documentation/web-api/reference/shows/get-a-show/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} showId The id of the show. If you know the Spotify URI it is easy\n   * to find the show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getShow = function (showId, options, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/shows/' + showId;\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple shows from the Spotify catalog.\n   * See [Get Several Shows](https://developer.spotify.com/documentation/web-api/reference/shows/get-several-shows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getShows = function (showIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/shows/',\n      params: { ids: showIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches current user's saved shows.\n   * See [Get Current User's Saved Shows](https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-shows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedShows = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/shows'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds a list of shows to the current user's saved shows.\n   * See [Save Shows for Current User](https://developer.spotify.com/documentation/web-api/reference/library/save-shows-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedShows = function (showIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/shows',\n      type: 'PUT',\n      postData: showIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove a list of shows from the current user's saved shows.\n   * See [Remove Shows for Current User](https://developer.spotify.com/documentation/web-api/reference/library/remove-shows-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedShows = function (\n    showIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/me/shows',\n      type: 'DELETE',\n      postData: showIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Checks if the current user's saved shows contains a certain list of shows.\n   * See [Check Current User's Saved Shows](https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-shows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedShows = function (\n    showIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/me/shows/contains',\n      params: { ids: showIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the episodes of a show from the Spotify catalog.\n   * See [Get a Show's Episodes](https://developer.spotify.com/documentation/web-api/reference/shows/get-shows-episodes/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} showId The id of the show. If you know the Spotify URI it is easy\n   * to find the show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getShowEpisodes = function (showId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/shows/' + showId + '/episodes'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches an episode from the Spotify catalog.\n   * See [Get an Episode](https://developer.spotify.com/documentation/web-api/reference/episodes/get-an-episode/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} episodeId The id of the episode. If you know the Spotify URI it is easy\n   * to find the episode id (e.g. spotify:episode:<here_is_the_episode_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getEpisode = function (episodeId, options, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/episodes/' + episodeId;\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple episodes from the Spotify catalog.\n   * See [Get Several Episodes](https://developer.spotify.com/documentation/web-api/reference/episodes/get-several-episodes/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} episodeIds The ids of the episodes. If you know their Spotify URI it is easy\n   * to find their episode id (e.g. spotify:episode:<here_is_the_episode_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getEpisodes = function (episodeIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/episodes/',\n      params: { ids: episodeIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Gets the access token in use.\n   *\n   * @return {string} accessToken The access token\n   */\n  Constr.prototype.getAccessToken = function () {\n    return _accessToken;\n  };\n\n  /**\n   * Sets the access token to be used.\n   * See [the Authorization Guide](https://developer.spotify.com/web-api/authorization-guide/) on\n   * the Spotify Developer site for more information about obtaining an access token.\n   *\n   * @param {string} accessToken The access token\n   * @return {void}\n   */\n  Constr.prototype.setAccessToken = function (accessToken) {\n    _accessToken = accessToken;\n  };\n\n  /**\n   * Sets an implementation of Promises/A+ to be used. E.g. Q, when.\n   * See [Conformant Implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md)\n   * for a list of some available options\n   *\n   * @param {Object} PromiseImplementation A Promises/A+ valid implementation\n   * @throws {Error} If the implementation being set doesn't conform with Promises/A+\n   * @return {void}\n   */\n  Constr.prototype.setPromiseImplementation = function (PromiseImplementation) {\n    var valid = false;\n    try {\n      var p = new PromiseImplementation(function (resolve) {\n        resolve();\n      });\n      if (typeof p.then === 'function' && typeof p.catch === 'function') {\n        valid = true;\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    if (valid) {\n      _promiseImplementation = PromiseImplementation;\n    } else {\n      throw new Error('Unsupported implementation of Promises/A+');\n    }\n  };\n\n  return Constr;\n})();\n\nif (typeof module === 'object' && typeof module.exports === 'object') {\n  module.exports = SpotifyWebApi;\n}\n", "import { Plugin } from 'obsidian';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport { PlayerPluginSettingTab } from './PlayerPluginSettingTab';\nimport { PlayerPluginSettings, DEFAULT_SETTINGS } from './types';\nimport { SpotifyAuthorizer } from './SpotifyAuthorizer';\nimport { PlayButton } from './PlayButton';\nimport { Logger, LogLevel } from './Logger';\n\nconst KeyValueRegex = /^([^:]+):\\s*(.+)$/;\n\nexport default class PlayerPlugin extends Plugin {\n  private spotifyApi!: SpotifyWebApi.SpotifyWebApiJs;\n  private authorizer!: SpotifyAuthorizer;\n  private logger: Logger = new Logger(LogLevel.Info); // Set verbosity level to debug for development\n  settings!: PlayerPluginSettings;\n\n  async onload() {\n    await this.loadSettings();\n    this.addSettingTab(new PlayerPluginSettingTab(this.app, this));\n\n    this.spotifyApi = new SpotifyWebApi();\n    this.authorizer = new SpotifyAuthorizer(\n      'obsidian://obsidian-spotiplay',\n      () => this.settings,\n      (accessToken) => {\n        this.settings.accessToken = accessToken;\n        this.saveSettings();\n        this.spotifyApi.setAccessToken(accessToken);\n      }\n    );\n\n    this.registerObsidianProtocolHandler('obsidian-spotiplay', async (data) => {\n      const { code }: { code: string } = data as unknown as { code: string };\n      await this.authorizer.handleAuthCallback({ code }, this.settings);\n    });\n\n    this.registerMarkdownCodeBlockProcessor(\n      'spotiplayer',\n      async (source, el) => {\n        let parsedData: Record<string, string> = {};\n        try {\n          parsedData = this.parseData(source);\n        } catch (error) {\n          this.logger.error('Invalid YAML in spotiplayer block:', error);\n          el.createEl('p', {\n            text: 'Error: Invalid YAML in spotiplayer block.',\n          });\n          return;\n        }\n\n        const { label, uri } = parsedData;\n        if (!label || !uri) {\n          this.logger.error('Missing label or uri in spotiplayer block.');\n          el.createEl('p', {\n            text: 'Error: Missing label or uri in spotiplayer block.',\n          });\n          return;\n        }\n\n        this.createPlayButton(label, uri, el);\n      }\n    );\n  }\n\n  parseData(source: string) {\n    const parsedData: Record<string, string> = {};\n    source.split('\\n').forEach((line) => {\n      const match = KeyValueRegex.exec(line);\n      if (match) {\n        const [, key, value] = match;\n        parsedData[key.trim()] = value.trim();\n      }\n    });\n    return parsedData;\n  }\n\n  async checkToken() {\n    this.logger.debug('Checking token validity...');\n    if (!this.authorizer.getAccessToken()) {\n      this.logger.debug('No token');\n      return false;\n    }\n    try {\n      await this.spotifyApi.getMyDevices();\n    } catch (error) {\n      this.logger.error('Token expired', error);\n      return false;\n    }\n    return true;\n  }\n\n  onunload() {\n    this.logger.debug('Unloading plugin...');\n    this.authorizer.dispose();\n  }\n\n  private async selectDevice() {\n    const devices = await this.spotifyApi.getMyDevices();\n    if (devices.devices.length === 0) {\n      this.logger.error('No devices available for playback.');\n      return 'No devices available for playback.';\n    }\n    this.settings.deviceId = devices.devices[0].id; // Automatically select the first device\n    await this.saveSettings();\n    this.logger.debug('Selected device:', this.settings.deviceId);\n  }\n\n  private async playTrack(uri: string) {\n    if (!this.settings.deviceId) {\n      this.logger.error('No device selected for playback.');\n      return 'No device available for playback. Make sure Spotify player is open and available.';\n    }\n    try {\n      let uris = undefined;\n      let context_uri = undefined;\n      if (uri.startsWith('spotify:track:')) {\n        uris = [uri];\n      } else if (\n        uri.startsWith('spotify:playlist:') ||\n        uri.startsWith('spotify:album:')\n      ) {\n        context_uri = uri;\n      } else {\n        this.logger.error('Invalid URI format:', uri);\n        return 'Invalid URI, should be \"spotify:track:...\" or \"spotify:playlist:...\" or \"spotify:album:...\"';\n      }\n      await this.spotifyApi.play({\n        device_id: this.settings.deviceId,\n        uris,\n        context_uri,\n      });\n    } catch (error) {\n      this.logger.error('Error playing track:', error);\n      return `Error playing track. ${(error as XMLHttpRequest).responseText}`;\n    }\n    this.logger.debug('Playing track:', uri);\n  }\n\n  private createPlayButton(label: string, uri: string, parent: HTMLElement) {\n    const btn = new PlayButton(label, uri, parent, (result) =>\n      this.onClick(result)\n    );\n    return btn;\n  }\n\n  private async onClick(uri: string) {\n    this.logger.debug('Play button clicked:', uri);\n    const isTokenValid = await this.checkToken();\n    if (!isTokenValid) {\n      await this.authorizer.authenticate();\n    }\n\n    if (!this.authorizer.getAccessToken()) {\n      return { success: false, error: `Token is null. Please authenticate.` };\n    }\n\n    let err: string | undefined = '';\n\n    if (!this.settings.deviceId) {\n      err = await this.selectDevice();\n      if (err) {\n        return { success: false, error: `Unable to select device: ${err}` };\n      }\n    }\n    err = await this.playTrack(uri);\n    if (err) {\n      return { success: false, error: `Unable to play track: ${err}` };\n    }\n    return { success: true };\n  }\n\n  async loadSettings() {\n    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());\n  }\n\n  async saveSettings() {\n    await this.saveData(this.settings);\n  }\n}\n", "import { PluginSettingTab, App, Setting } from 'obsidian';\r\nimport PlayerPlugin from './main';\r\n\r\nexport class PlayerPluginSettingTab extends PluginSettingTab {\r\n  plugin: PlayerPlugin;\r\n\r\n  constructor(app: App, plugin: PlayerPlugin) {\r\n    super(app, plugin);\r\n    this.plugin = plugin;\r\n  }\r\n\r\n  display(): void {\r\n    const { containerEl } = this;\r\n    containerEl.empty();\r\n\r\n    containerEl.createEl('h2', { text: 'SpotiPlayer Settings' });\r\n\r\n    new Setting(containerEl)\r\n      .setName('Client ID')\r\n      .setDesc('Your Spotify application client ID')\r\n      .addText((text) =>\r\n        text\r\n          .setPlaceholder('Enter your client ID')\r\n          .setValue(this.plugin.settings.clientId)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.clientId = value;\r\n            await this.plugin.saveSettings();\r\n          })\r\n      );\r\n\r\n    new Setting(containerEl)\r\n      .setName('Client Secret')\r\n      .setDesc('Your Spotify application client secret')\r\n      .addText((text) =>\r\n        text\r\n          .setPlaceholder('Enter your client secret')\r\n          .setValue(this.plugin.settings.clientSecret)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.clientSecret = value;\r\n            await this.plugin.saveSettings();\r\n          })\r\n      );\r\n\r\n    new Setting(containerEl)\r\n      .setName('Device ID')\r\n      .setDesc('Your Spotify playback device ID')\r\n      .addText((text) =>\r\n        text\r\n          .setPlaceholder(\r\n            'Enter your device ID. Leave empty to auto-select first'\r\n          )\r\n          .setValue(this.plugin.settings.deviceId || '')\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.deviceId = value || null;\r\n            await this.plugin.saveSettings();\r\n          })\r\n      );\r\n  }\r\n}\r\n", "export const DEFAULT_SETTINGS: PlayerPluginSettings = {\r\n  clientId: '',\r\n  clientSecret: '',\r\n  deviceId: null,\r\n  accessToken: null,\r\n};\r\n\r\nexport interface PlayerPluginSettings {\r\n  clientId: string;\r\n  clientSecret: string;\r\n  deviceId: string | null;\r\n  accessToken: string | null;\r\n}\r\n", "import { PlayerPluginSettings } from './types';\r\n\r\nexport class SpotifyAuthorizer {\r\n  private accessToken: string | null = null;\r\n  private refreshToken: string | null = null;\r\n  private authPromiseResolve:\r\n    | ((data: { accessToken: string; refreshToken: string } | null) => void)\r\n    | null = null;\r\n  private refreshTimeout: number | null = null;\r\n  authTimeout: number | null = null;\r\n\r\n  constructor(\r\n    private redirectUri: string,\r\n    private getSettings: () => PlayerPluginSettings,\r\n    private onTokenChanged: (accessToken: string | null) => void\r\n  ) {\r\n    // TODO doesnt work after app restart anyway\r\n    this.accessToken = getSettings().accessToken;\r\n  }\r\n\r\n  async authenticate() {\r\n    // console.debug('Authenticating with Spotify...');\r\n    const scopes = 'user-read-playback-state user-modify-playback-state';\r\n    const authUrl = `https://accounts.spotify.com/authorize?response_type=code&client_id=${this.getSettings().clientId}&redirect_uri=${encodeURIComponent(this.redirectUri)}&scope=${encodeURIComponent(scopes)}`;\r\n    const tokenData = await this.getToken(authUrl);\r\n    if (!tokenData) {\r\n      console.error('Failed to get token data');\r\n      return;\r\n    }\r\n    this.accessToken = tokenData.accessToken;\r\n    this.refreshToken = tokenData.refreshToken;\r\n    this.onTokenChanged(this.accessToken);\r\n    if (this.refreshToken) {\r\n      if (this.refreshTimeout) clearTimeout(this.refreshTimeout);\r\n      this.refreshTimeout = setTimeout(() => {\r\n        this.refreshAccessToken();\r\n      }, 3500000); // Try to refresh token (almost) every hour\r\n    }\r\n  }\r\n\r\n  // TODO test properly\r\n  async refreshAccessToken() {\r\n    if (!this.refreshToken) {\r\n      console.error('No refresh token available.');\r\n      return;\r\n    }\r\n    const tokenData = await fetch(`https://accounts.spotify.com/api/token`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        Authorization:\r\n          'Basic ' +\r\n          btoa(\r\n            this.getSettings().clientId + ':' + this.getSettings().clientSecret\r\n          ),\r\n      },\r\n      body: new URLSearchParams({\r\n        grant_type: 'refresh_token',\r\n        refresh_token: this.refreshToken,\r\n        client_id: this.getSettings().clientId,\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => ({\r\n        accessToken: data.access_token,\r\n        refreshToken: data.refresh_token,\r\n      }))\r\n      .catch((error) => {\r\n        console.error('Error fetching token:', error);\r\n        return null;\r\n      });\r\n\r\n    if (tokenData) {\r\n      if (tokenData.accessToken) this.accessToken = tokenData.accessToken;\r\n      if (tokenData.refreshToken) this.refreshToken = tokenData.refreshToken;\r\n      this.onTokenChanged(this.accessToken);\r\n      if (this.refreshToken) {\r\n        if (this.refreshTimeout) clearTimeout(this.refreshTimeout);\r\n        this.refreshTimeout = setTimeout(() => {\r\n          this.refreshAccessToken();\r\n        }, 3500000); // Refresh token (almost) every hour\r\n      }\r\n    }\r\n  }\r\n\r\n  dispose() {\r\n    if (this.refreshTimeout) clearTimeout(this.refreshTimeout);\r\n    this.accessToken = null;\r\n    this.refreshToken = null;\r\n    this.authPromiseResolve = null;\r\n  }\r\n\r\n  // This opens in response to the redirect from Spotify after authentication\r\n  async handleAuthCallback(\r\n    data: { code: string },\r\n    settings: PlayerPluginSettings\r\n  ) {\r\n    if (this.authTimeout) clearTimeout(this.authTimeout);\r\n\r\n    const tokenData = await fetch(`https://accounts.spotify.com/api/token`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        Authorization:\r\n          'Basic ' + btoa(settings.clientId + ':' + settings.clientSecret),\r\n      },\r\n      body: new URLSearchParams({\r\n        grant_type: 'authorization_code',\r\n        code: data.code,\r\n        redirect_uri: this.redirectUri,\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => ({\r\n        accessToken: data.access_token,\r\n        refreshToken: data.refresh_token,\r\n      }))\r\n      .catch((error) => {\r\n        console.error('Error fetching token:', error);\r\n        return null;\r\n      });\r\n\r\n    if (this.authPromiseResolve) this.authPromiseResolve(tokenData);\r\n  }\r\n\r\n  private async getToken(\r\n    authUrl: string\r\n  ): Promise<{ accessToken: string; refreshToken: string } | null> {\r\n    return new Promise((resolve, reject) => {\r\n      this.authPromiseResolve = resolve;\r\n      this.authTimeout = setTimeout(() => {\r\n        this.authPromiseResolve = null;\r\n        this.accessToken = null;\r\n        this.refreshToken = null;\r\n        reject(new Error('Authentication timed out'));\r\n      }, 30000);\r\n      // console.debug('Opening auth URL:', authUrl);\r\n      window.open(authUrl);\r\n    });\r\n  }\r\n\r\n  getAccessToken() {\r\n    return this.accessToken;\r\n  }\r\n}\r\n", "export class PlayButton {\r\n  isLoading: boolean = false;\r\n  error?: string | undefined = undefined;\r\n  elt: HTMLButtonElement;\r\n\r\n  constructor(\r\n    private label: string,\r\n    private uri: string,\r\n    private parent: HTMLElement,\r\n    private onClick: (uri: string) => Promise<{ error?: string | undefined }>\r\n  ) {\r\n    this.label = label;\r\n    this.uri = uri;\r\n    this.elt = this.createButtonElt(parent);\r\n  }\r\n\r\n  setError(error: string) {\r\n    this.isLoading = false;\r\n    this.error = error;\r\n    this.updateText();\r\n  }\r\n\r\n  private updateText() {\r\n    this.elt.setText(this.text);\r\n  }\r\n\r\n  private get text() {\r\n    if (this.isLoading) return `Loading...`;\r\n    if (this.error) return `Error!`;\r\n    return `\uD83C\uDFB5 Play ${this.label}`;\r\n  }\r\n\r\n  async onClickHandler() {\r\n    // console.debug('onClickHandler:', this.uri);\r\n    if (this.isLoading) return;\r\n    this.isLoading = true;\r\n    this.error = undefined;\r\n    this.updateText();\r\n    const result = await this.onClick(this.uri);\r\n    this.isLoading = false;\r\n    if (result.error) this.error = result.error;\r\n    this.updateText();\r\n  }\r\n\r\n  showError(text: string) {\r\n    this.parent.createEl('p', {\r\n      text,\r\n      attr: { class: 'spotiplayer-error', style: 'color: red' },\r\n    });\r\n  }\r\n\r\n  private createButtonElt(parent: HTMLElement) {\r\n    const btn = parent.createEl('button', {\r\n      text: this.text,\r\n      cls: 'spotiplayer-button',\r\n    });\r\n    btn.setAttr('aria-pressed', 'false');\r\n    btn.onclick = this.onClickHandler.bind(this);\r\n    return btn;\r\n  }\r\n}\r\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\r\nexport class Logger {\r\n  private logLevel: LogLevel;\r\n\r\n  constructor(logLevel: LogLevel = LogLevel.Info) {\r\n    this.logLevel = logLevel;\r\n  }\r\n\r\n  setVerbosity(level: LogLevel) {\r\n    this.logLevel = level;\r\n  }\r\n\r\n  debug(message: string, ...optionalParams: any[]) {\r\n    if (this.logLevel >= LogLevel.Debug) {\r\n      console.debug(message, ...optionalParams);\r\n    }\r\n  }\r\n\r\n  warn(message: string, ...optionalParams: any[]) {\r\n    if (this.logLevel >= LogLevel.Warn) {\r\n      console.warn(message, ...optionalParams);\r\n    }\r\n  }\r\n\r\n  log(message: string, ...optionalParams: any[]) {\r\n    if (this.logLevel >= LogLevel.Info) {\r\n      console.log(message, ...optionalParams);\r\n    }\r\n  }\r\n\r\n  error(message: string, ...optionalParams: any[]) {\r\n    console.error(message, ...optionalParams);\r\n  }\r\n}\r\n\r\nexport enum LogLevel {\r\n  Error = 0,\r\n  Warn = 1,\r\n  Info = 2,\r\n  Debug = 3,\r\n}\r\n"],
  "mappings": "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",
  "names": ["exports", "module", "SpotifyWebApi", "import_obsidian", "data", "SpotifyWebApi"]
}
